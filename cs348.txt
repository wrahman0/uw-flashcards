* What is physical design?

Process of selecting data structures to implement conceptual schema.

* What is tuning?

Periodic adjustment of system's physical and/or conceptual schema to adjust for
changing performance characteristics and/or requirements.

* What is a workload in terms of database?

When the database is designed, its assigned an expected workload, which is the
expected amount of work that is to be performed by the database for a given
period of time.

* What is contained in a workload description?

- most important queries and their freq
- most important updates and their freq
- desired performance goal for each query/update

* What do we look at for query tuning?

- What relations are accessed?
- What attributes are accessed?
- What attributes occur in selection/join conditions?

* What do we look at for update queries?

- What is the type of update?
- What relations are affected?
- What attributes are affected?
- What attributes occur in selection/join conditions?

* What are physical storage options for each relations?

- Unsorted heap (file)
- Sorted file
- Hash file

* What are indexes used for?

Speed up lookups

* What are possible indexes?

- B-trees
- R-trees
- Hash tables

* What are the effects of adding LastnameIndex:

create index LastnameIndex
on Employee(Lastname) [CLUSTER];

drop index LastnameIndex;

- When selections involve the LastnameIndex, performance is improved
- Increase insert time for insertions
- Increase or decrease exec for Employee updates
- Increase space requirements for Employee

* Whats a clustering vs non-clustering index?

- For clustering index, rows are stored physically on the disk in the same order
as the index. One clustering index allowed.

- For non clustering index, there is a second list that has pointers to the
	physical rows. The physical rows are not modified. Can have multiple
	non clustering index
	
* What is co-clustering?

Their tuples are interleaved within the same file

* Why is co-clustering useful?

When storing heirarchical data (1:N relations).

* How does co-clustering affect performance?

- Speed up joins, especially foreign key joins => since in the same file
- Sequential scans of either relations become slower => since more data per file

* What are range queries?

select *
from R
where A >= C;

* What is the SQL for making one index from many attributes?

create index NameIndex
on Employee(Lastname, Firstname);

* Why does ordering matter in:
create index NameIndex
on Employee(Lastname, Firstname);

The tuples are organized by first Lastname then Firstname.

* What are the 5 physical design guidelines?

1. Dont index unless perf increase outweighs update overhead
2. Attr. in WHERE clauses are candidate index search keys
3. Multi-attr index used when several where conditions
4. Choose indexes that benefit the most number of queries
5. Each relation can have at most one clustering scheme

* What are 3 ways to tune the conceptual schema?

1. Re-normalization
2. Denormalization
3. Partitioning

* What is denormalization?

Purposefully introducing redundancy.

* What is normalization?

Removing redundant data.

* What is horizontal partitioning?

All the columns and subset of rows

* What is vertical partitioning?

Subset of the columns and all the row.

* What are the 4 tuning guidelines?

1. Avoid useless sorts ie GROUP BY
2. When possible, replace subqueries with joins
3. When possible, replace corelated subqueries with uncorrelated subqueries
4. Use vendor supplied tools

* What are the 2 tuning application guidelines?

1. Minimize comm cost
	i. return fewest possible cols and rows
	ii. update multiple rows with WHERE instead of cursor
2. Minimize lock contention and hot-spots
	i. delay updates as long as possible

* Why do we need transactions?

Transaction help with managing concurrent accesses to the db since the db is a
shared resource.

* What are problems caused by concurrency?

- Inconsistent reads (Staleness)
- Lost updates
- Non-repeatable reads

* What are problems caused by failures?

- if fails during query: partial query executed
- if fails after query: partial data updated
- if fails in between queries: info lost, ie withdraw money but didnt deposit

* What are transaction commands?

- Commit (sql: commit)
- Abort  (sql: rollback)

* What are properties of transactions?

- Atomic: 			entirely or not at all
- Consistent: 	preserves consistency of db
- Isolated:			dont interfere with each other
- Durable:			permanent after commit

* What are the 3 transaction modes options in sql?

1. diagnotic size: How many error conditions to record
2. access mode: READ ONLY or READ WRITE (default)
3. isolation level: how the interactions of transactions are managed

* What are the 4 isolation levels:

1. Level 0: Read uncommitted - can see uncommitted changes of others
2. Level 1: Read committed   - can see only committed changes but non repeatable
3. Level 2: Repeatable read  - repeatable reads but phantoms exists
4. Level 3: Serializability  - executed one at a time in same order

* What are the criteria for conflict?

1. 2 different transactions
2. operate on the same resource
3. one of the operation is a write

* How do you test for serializability?

Serialization iff serialization graph is acyclic.

* Know how to draw serialization graph

ch 11, slide 32

* What are relational design principals?

- semantic unity
- avoid info repetition
- avoid null
- avoid spurious joins

* What are problems with one large table?

- update problems
- insert problem
- delete problem
- increases space requirements

* What is functional dependency?

When a set of attributes uniquely determines another set of values

X -> Y means X functionally determines Y.

* What is a superkey?

Set of attr. such that no two tuples agree on their values for those attr.

* What is a candidate key?

Minimal superkey.

* What is a primary key?

A candidate key chosen by DBA.

* What is a closure?

Closure of a set of FD F (denoted F+) is the set of all FD that are satisfied by
every relational instance that satisfies F.

* How do you compute closures?

Algo: Ch 10, slide 18

* What is a schema decomp?

R = R_1 || ... || R_n

* What 3 things does a good composition avoid?

- losing info
- complicate checking of constraints
- contains anomalies 

* What is lossless-join decomp?

If rejoining the decomposed tables always produces exactly the tuples in the
original.

The decomp of R = {R1, R2} is lossless iff the common attr of R1 and R2 form a
superkey of either schema.

* What is a normal form?

When you transform the schema into a form where there is a primary key and a set
of mutually indep attributes.

* What are the normal forms dependant on FDs?

- BCNF
- 3NF

* How do you determine if a schema is BCNF?

If X -> Y then X is a superkey of the relation. 

Example: R = {Sno, Sname, City, Pno, Pname, Price}

Sno -> Sname, City
Pno -> Pname
Sno, Pno -> Price

Sno determines Sname and city but is not a superkey because Sno and Pno are
needed to determine price.

* What is 3NF?

In BCNF, we have that for any FD, X is a superkey. For 3NF we have that if Y is
not prime, ie its not part of any candidate key, then X should be a superkey.

* What is the minimal cover?

For every set of FD F, there is a minimal set of dependencies F' (Min cover)

* What do functional dependencies do?

Provides clues towards eliminating redundancies in relational schema.

Goals:

Decompose such that:
1. lossless-join
2. dependency preserving
3. BCNF (at least 3NF)

* What is impedence mismatch?

The problem of how the data should be passed between set-oriented SQL and the
application programming language. 

* What is a cursor?

If a query returns more than one row, then a cursor must be used to retrieve
values from the result. Cursor is a pointer to one of the values.

* How do you use a cursor?

1. Declare
2. Open
3. Fetch one or more tuples
4. Close

* What is the fetch command?

fetch [<location>] cursor-name [ INTO <host-var>, ... ];

* How are dynamic embedded sql written?

- PREPARE 
- EXECUTE

* What are SQL descriptors?

If the numbers and types of input and output values are not known in advance,
use this to determine them at run-time. 

* What is the SQLDA (descriptor area)? 

Its used to hold a desc of the struc of a query result. 

* What is the DESCRIBE command?

It can be used to populate a descriptor area => find the struct of a query
result.

* What is SQLJ? 

Allows SQL embedding into Java.

* What is static and dynamic SQL?

Static: sql statements are prepared during compile time
Dynamic: during runtime => more flexible

* What are stored procedures?

Stored procedure executes app logic directly in the DBMS process.

* What are the adv of stored procedures?

1. Minimize data transfers costs
2. Centralize app code
3. Logical indep

* What is a stored proc example?

CREATE FUNCTION deptSalariesF(dept CHAR(3))
	RETURNS TABLE(salary...)
	LANGUAGE SQL
RETURN
	SELECT salary
	FROM employee
	WHERE workdept = dept

* What is the advantage of CLI vs Embedded?

CLI - compile once and access all dbms
Embedded - compile when you need to switch

* What is a view?

A view is a relation in the external schema whose instance is determined by the
instances of the relations in the conceptual schema. 

* How are views like base relations?

- Access controls can be applied
- Other views can be define in terms of it
- Schema info appears in the database schema

* What are the 2 types of views?

- Virtual: used for queries, not stored in the db
- Materialized: query executed, view constructed, stored in db

* Whats the view creation command?

create [materialized] view <name> 
	as <query>

* What happens when you query a virtual view?

- compile time: view def is found
- query is updated with the view def
- query optimized and exec

* When is a view updatable?

- query ref only one table
- outputs simple attr
- no grouping/aggr/distinct
- no nested queries
- no set operations

* What is SQL?

SQL is structured query language. Made of 2 sublanguages: DML & DDL

* What DDL and DML?

- DML is data manip language: select, insert, update, delete
- DDL is data definition language: create, drop

* Why is the SQL standard multisets?

- Duplicates allowed (Use select distinct to get rid of dupes)

* How do you find the min cover?

- List all FD
- Make RHS one attribute
- For each FD, compute the closure
- For each FD, try to use other FDs only to get the same X->Y value
	if you can, its redundant
	else its part of the min cover

* How do you find the candidate keys?

- You find the min cover
- Candidate keys are the LHS

* Determine if the decompositions preserves the dependency.

1. Start with a set {}
2. Insert the LHS UNION first decomposition R1 into the set
3. Compute the closure = { set, FD }
4. If you can derive the other FDs, then you are done
5. Otherwise, take the other FD and UNION the LHS 
6. Intersect the other decomposition R2
7. Go to step 3 and repeat until all the decompositions used
8. If not satisfied, then doesnt preserve dependency

* Determine if the decomposition is lossless-join?

Example:
D = { ABE, BCF, ABDF }

Use the chase algo:

1. Take the decompositions and make a table:
			A		B		C		D		E		F
ABE		a		b		c1	d1	e		f1
BCF		a2	b		c		d2	e2	f
ABDF	a		b		c3	d		e3	f

Step 1: Using AB->E, because we have a row with AB->E. Convert other rows that
have AB -> e_x to AB -> e. We replace x with the lowest number when there are
numbers involved. 

			A		B		C		D		E		F
ABE		a		b		c1	d1	e		f1
BCF		a2	b		c		d2	e2	f
ABDF	a		b		c3	d		e		f

If we can get to a row with no numbers, then its lossless.

* State the strongest normal form for the relation _____.

Look at the min cover dependency set. If the LHS is all super keys, then its
BCNF.

* 
