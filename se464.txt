Pre midterm:
===========

* What is software arch?

Conceptual fabric that defines a system and how the components interact with
each other. Arch is usually parts of a system thats hard to change once the
system is built.

* What are the three dimensions that architecture captures?

- Structure
- Communication
- Non functional requirements

* Whats logical and physical arch?

Logical arch is the logical seperation of the system into multiple pieces. For
instance, the logical seperation of the code into model/view/controller.

Physical arch is the physical seperation of the system into its pieces. For
instance, the server is hosted in a physical server in Oregon, USA. There is a
clear physical bound that the system is broken down into.

* Why is building software hard?

- Young field
- High expectation
- Software cannot execute indep. It has a hold bunch of pieces that must fit
	together

* What are some difficulties that cannot be overcome?

- Complexity
- Conformity - dependancy on the environment on which its built
- Changeability
- Intangibility - Not limited by physical laws

* How do you reduce complexity?

- Use better tools and envs
- Use high level langs
- Follow dev techniques like agile
- Focus on having a good design

* What does "Principal" design decision mean and why is it different from
* normal?

Principal design decisions simply mean that the design has a level of importance
that grants it the architectural status.

* What is abstraction?

Removing the unnecessary details and providing a compact interface thats easy to
use. The interface does not expose any implementation details.

* What is decomposition?

Breaking problem into individual components

* What are decomposition criteria?

- Implementation teams
- parallelization
- obvious partitions

* Whats arch models, views, and visuals?

- models - doc about some or all of the design decisions in a system
- views - subset of related design decisions
- visuals - way of showing some/all of arch to stakeholders

* What is the purpose of a sequence diag?

It shows inter component collaboration

* What does a deployment diagram depict?

Shows the mapping of components to physical devices

* What are state charts for?

Formal description of system's behav

* What is software topology?

Keep frequent collaborators close physically and logically

Post midterm: 
============

* What is the STUPID Principal?
	
	Things to avoid:
	- Singleton
	- Tight coupling
	- Untestable
	- Premature Optimization
	- Indescriptive Naming
	- Duplication

* What is the SOLID principal?

	- Single responsibility principal
	- Open closed principal
	- Liskov Substitution Principal
	- Interface segregation principal 
		- Splitting interface into sections to allow clients to use only what they need
	- Dependency Inversion Principal
	
- Composition is better than inheritance
	
	- Composition: Create objects with others as members. Has-a relations
	- Inheritance: Having parent's attrs

* Whats Liskov's sub principal:

Derived classes behaves as parents

* Why do we use design patterns:

Design patterns provide common vocab. Use existing knowledge to solve common problems.
Robust to future changes. Increases reusability since these patterns promote good 
code practice. 

* Whats a design pattern?

Common solution to recurring problems. They are lang independent. 

* What are the 4 main parts of design patterns?

1. Name
2. Problem
3. Solution
4. Consequences and trade offs
 
* What are categories of design patterns?

1. Creational
	- Defer decisions about class instantiation until runtime
2. Structural
	- Make relations and structure of the code more flexible
3. Behavioral
	- Solve communication problems between objects


* Code smells.

Large classes
Deep nesting
Duplicate code
State variables
Bad encapsulation and info hiding
Many params on interfaces

* Why MVC Pattern?

When the UI Changes a lot and the same data needs to be displayed in different
ways. Testing UI is difficult. We want to only test the logic.

* Goals of MVC?

Decouple models and view to increase the testability and maintainability of the
system. We also get more extendability.

* Parts of MVC?

Model: contains the app data. Does not know how to present itself.
View: Presents the model.
Controller: Communication connection between view and model.

* Whats the interaction in MVC?

User -> View
View -> Controller
Controller translates view commands to commands for the model
Controller -> Model
Model Changes ? Fire update notifications : Continue
View responds to update notifications

* What are benefits and trade offs for MVC?

Pros: 

+ Decouples view and logic
+ ^ Testability

Cons:

- Complex
- Efficiency: When the model is large, freq updates are made => loop the
observers to tell them to updates. When many observers, its inefficient

* What are the patterns used to build MVC?

View/Controller: Strategy pattern to decide during runtime what to do
View: Composite patterns of ui components
View/Model: Observer pattern

* Whats the MVP pattern?

Instead of a controller, you now have a presenter that does the application
logic. View is just a thin layer for the user and has no data storage. Simply
fires events that the presenter takes. Model is pretty much same as before.

* Pros and cons of the MVP pattern?

Same as MVC but with ^ testablility and ^ decoupling since view knows nothing
about the model. 

* Whats the Model-View-ViewModel pattern?

Its event driven and introduces viewmodel to decouple view from controller and
presenter even more. 

* Whats dependency inversion principal?

Programming to interfaces and not to implementations. Answers the question of
how to wire interfaces togetther without creating dependency on concrete
implementations. 

* Whats are DI goals?

Eliminate initiatization statements: 
	
	Foo f = new ConcreteFoo();

* How is DI achieved?

Takes set of components like classes and interfaces
Adds to set of configs
Provides configs to injection framework
Bootstraps creation of objects with configs

* What are some DI frameworks?

- Google Guice
- Dagger 
- Spring

* What is meant by inversion of control?

Inversion of control is a design principal where object coupling is done
during runtime.

* What is grid computing?

Combination of computing resources to work on specific computation task.

* What is cloud computing?

Model which enables access to a set of computing resources which is shared among
other users. It allows resources to be provisioned, and released with minimal
overhead. This model promotes availability.

* What are the characteristics of cloud computing?

On demand self-service allows users to allocate resources themselves without
other human interactions. 

Broad network access allows general networks to access the services

Resource pooling allows resources to be pooled and served to multiple consumers.

Rapid Elasticity allows resources to be added and removed easily

Measured service allows the logging and monitoring of storage, processes and
bandwidth among other metrics.

* What are the benefits of cloud computing?

- Agility: quickly respond to changes
- Scalability: add and remove resources to best serve the usage
- Cost: Resources are shared and can be released when not used
- Reliability: Central resources are controlled by experts like Amazon
- Security: Best practices are used to keep allocated resources safe

* What is virtualization?

Refers to the act of creating a virtual version of something. For example,
virtual OS

* What is SaaS?

Means software as a service. For instance, Google docs is a SaaS because they
are providing the service of editting docs as a cloud service.

* What is PaaS?

Means platform as a service. Vendor controlled environments are offered as
services. 

* What is IaaS?

Infrastructure as a service meaning vendor provides computing resources.

* What are the Non-functional requirements for cloud security?

Users want: 
- Confidentiality
- Integrity (data not altered)
- Authenticity
- Anonymity 
- Privacy

* What is REST?

Communication protocol that clients use as an interface to talk to the server.

* What are the common REST operations?

GET, PUT, POST, DELETE

* What are the benefits of typed systems?

- Improved documentation
- Helps compilers during optimization phase

Negatives: Must declare types during compile time

* What does a type checker guarantee?

* What is functional programming?

The idea of treating functions as first class entities in a language. Functions 
are taken in as arguments and returned as results. The language has no states,
instead its a series of transformation of functions.

* What is principal design decision?

A set of decisions made about the system that gives it "Arch" status.

* What is software architecture?

Software architecture is a set of principal design decisions about the system.
Its the blueprint for the software system.

* Whats Functional vs Non Functional requirements?

Functional requirement is what a system must do.
Non funct. requirement is what a system must be.

* What is a Non-func property?

Constraint on how the system implements and delivers in functions.

* What are examples of NFP?

- Efficiency
- Scalability
- Adaptability
- Complexity
- Hetrogeneity
- Dependability

* Who are the stakeholders of a system?

- Architect
- Devs
- Testers
- Managers
- Customers
- Users
- Vendors

* Whats prescriptive vs descriptive architecture?

Prescriptive is the design that was proposed before the system was even
implemented. Descriptive is how the system is actually built.

* Whats architectural degradation?

Arch degradation is encompassed by arch drift and arch erosion.

Arch. drift is the intro of principal design into system's descriptive
architecture that do no violate prescriptive architecture and were not
originally in the prescriptive architecture. 

Arch. erosion is intro of design decisions that violate the prescriptive
architecture.

* What is arch recovery?

Figuring out the system's architecture from implementation details.

* What are components in an architecture?

Its a software component that encapsulates a subset of the system logic and/or
holds a subset of the data. It restricts access to this subset of computation
and storage via an explicit interface.

* What are connectors in an architecture?

They are entities that enable the communication between software components.
Usually is application independent.

* What are configurations in an architecture?

Configs are a set of specific associations between components and connectors.
Essentially how the system's components and connectors are setup.

* What are the goals of topology?

Minimize coupling, maximize cohesion.

* What are properties of architectural representations?

Ambiguity - open to many interpretations, 
Accuracy - correct within tolerances,
Precision - consistent but not necessarily correct.

* What are arch styles?

Arch styles are a named collection of arch design decisions that are applicable
in a given situation. 

* What are the design principals for security?

- Least priv
- Fail-safe defaults
- Economy of mechanism - adopt simple mechanisms
- Complete mediation - ensure all accesses are checked and permitted
- Open design - dont rely on secrecy being a level of protection
- Seperation of priv - Categorize users to grant different access levels
- Least common mechanism - have few access ways to crit resources
- Psycological acceptability - make it easy to use so that ppl use it
- Defence in depty: have many layers of security

* What is architectural modelling? 

Document to capture some/all of the design decisions made to build a system.

* What is the diff between analysis and design?

TODO:

* What are the parts of a design process?

for (;;){
	Build();
	Measure();
	Learn();
}

* What does an optional type checker do?

Its a pluggable behaviour into the build system which provides guarantees about
a section of code. If the plugged in rules are not met, warnings are generated.
